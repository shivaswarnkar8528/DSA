// Array data structure self created 
// we declare more function to perform well

#include<iostream>
using namespace std;
//create array class
class Array{
    private:
        int capacity;
        int Lastindex;
        int *ptr;
    public:
        Array(int);
        bool isEmpty();
        void append(int);
        void insert(int,int);
        void edit(int,int);
        void del(int);
        bool iffull();
        int get(int);
        int count();
        int find(int);
        ~Array();

};

//overriding of Array constructer
Array::Array(int cap){
     capacity=cap;
     Lastindex=-1;
     ptr=new int[capacity];
}

//overriding bool isEmpty()
bool Array::isEmpty(){
    return Lastindex==-1;
}
//overriding append()
void Array::append(int data){
    if(Lastindex==capacity-1){
        cout<<"Array size full";    }
    else{
        Lastindex++;
        ptr[Lastindex]=data;
    }
}
//overriding insert()
void Array::insert(int index,int data){
    int i;
    if(Lastindex==capacity-1)
        cout<<endl<<"Array is already full";
    else if(index<0 || index>Lastindex+1){
        cout<<"Invalid index";
    } 
    else{
        for(i=Lastindex;i>=index;i--){
            ptr[i+1]=ptr[i];
            ptr[index]=data;
            Lastindex++;
        }
    }    
}

//overriding edit()
void Array::edit(int index,int data){
        if(index<0 || index>Lastindex)
            cout<<"index range should be >0 & <Lastindex";
        else{
            ptr[index]=data;
        }    
}

//overriding of index function
void Array::del(int index){
    int i;
    if(index<0 || index>Lastindex){
        cout<<endl<<"index range should be >0 & <Lastindex";
    }
    //when array is empty
    else if(Lastindex==-1){
        cout<<endl<<"Array is empty";
    }
    else{
        for(i=index;i<Lastindex;i++){
            ptr[i]=ptr[i+1];
        }
        Lastindex--;
    }
}

//overriding of isfull
bool Array::iffull(){
    return Lastindex<=Lastindex;
}

int Array::get(int index){
    if(index>=0 && index<=Lastindex)
        return ptr[index];
    cout<<endl<<"Invalid index or empty array";
}

int Array::count(){
    return Lastindex+1;
}

Array::~Array(){
    delete[]  ptr;
}

int Array::find(int data){
    int i;
    for(i=0;i<=Lastindex;i++){
        if(ptr[i]==data){
            return i;
        }
    }
    return -1;
}
int main(){
    Array obj(5);
    if(obj.isEmpty())
        cout<<"empty array";
    return 0;
}
